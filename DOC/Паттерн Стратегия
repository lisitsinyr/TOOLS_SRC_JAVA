https://t.me/java_secrets/27
✅Паттерн "Стратегия"

Этот паттерн является поведенческим паттерном проектирования, который позволяет заменять какое-либо поведение класса во время выполнения и следует принципу "композиция лучше наследования".

Определяет семейство алгоритмов, инкапсулирует каждый из них и делает их взаимозаменяемыми
 - такое определение дает "Банда четырех" в своей книге.

Разберем на простом примере:
Допустим, у нас есть класс SortContext, который должен уметь сортировать набор данных. Сначала мы "определяем семейство алгоритмов и инкапсулируем их" (в нашем случае алгоритмы сортировки) в интерфейс SortStrategy:
public interface SortStrategy {
    void sort(int[] dataset);
}
И реализации алгоритмов:
public class BubbleSort implements SortStrategy {
    public void sort(int[] dataset) {
        // Реализация алгоритма сортировки пузырьком
    }
}

public class QuickSort implements SortStrategy {
    public void sort(int[] dataset) {
        // Реализация алгоритма быстрой сортировки
    }
}
Так будет выглядеть наш класс SortContext с "инкапсулированным и заменяемым" алгоритмом сортировки:
public class SortContext {
    private SortStrategy sortStrategy;

    public void setSortStrategy(SortStrategy sortStrategy) 
    {
        this.sortStrategy = sortStrategy;
    }

    public void sortData(int[] dataset) 
    {
        sortStrategy.sort(dataset);
    }
}
Теперь мы можем использовать класс SortContext для выполнения сортировки данных:
public class Main {
    public static void main(String[] args) {
        int[] dataset = {2, 4, 1, 5, 3};

        Context context = new Context();
        context.setSortStrategy(new BubbleSort()); // используем сортировку пузырьком
        context.sortData(dataset);

        context.setSortStrategy(new QuickSort()); // используем быструю сортировку
        context.sortData(dataset);
    }
}
Паттерн позволяет нам менять алгоритм во время выполнения программы, просто изменяя объект стратегии, который передается классу контекста.

🫡 Секреты Java (https://t.me/+wi4lEhU8Zg41ZjIy)

#pattern